CRV_TOKEN_ADDRESS = "0xD533a949740bb3306d119CC777fa900bA034cd52"
BAT_TOKEN_ADDRESS = "0x0D8775F648430679A709E98d2b0Cb6250d2887EF"

VEST_AMOUNT = 1e20

VESTING_ESCROW_FACTORY_ADDRESS = "0xe3997288987E6297Ad550A69B31439504F513267"
VESTING_ESCROW_FACTORY_ADMIN = "0x40907540d8a6C65c637785e8f8B742ae6b0b9968"
FACTORY_ADMIN_IMPLEMENTATION = "0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37"

VOTING_ESCROW_ADDRESS = "0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2"

VOTING_CONTRACT_PROXY = "0xE478de485ad2fe566d49342Cbd03E49ed7DB3356"
VOTING_CONTRACT_IMPLEMENTATION = "0xa4D1a2693589840BABb7f3A44D14Fdf41b3bF1Fe"

# At the time of writing, this Convex Finance-controlled contract holds ~48% 
# of all veCRV, which is enough to achieve the required 30% quorum with one ballot
WHALE_VOTER = "0x989aeb4d175e16225e39e87d0d97a3360524ad80"

# Any account with at least 2500 veCRV could fulfill this role
VOTE_CREATOR = "0x9B44473E223f8a3c047AD86f387B80402536B029"

"""
On vote execution, the script below calls VESTING_ESCROW_FACTORY_ADMIN.execute(
_target=VESTING_ESCROW_FACTORY_ADDRESS, 
_ethValue=0, 
_data=data,
). 

"data" calls one of the factory's methods, deploy_vesting_contract(
_token=CRV_TOKEN_ADDRESS,
_recipient="0x21ff52E30b0cDf7eC2cF6619c7F1483D045E6700",
_amount=VEST_AMOUNT,
_can_disable=True,
_vesting_duration=(2 * 365 * 86400),
).
"_recipient" above is the vesting escrow proxy's address only in our test environment.
***IN PRODUCTION, REPLACE IT WITH YOUR PROXY'S ADDRESS.***

The curvefi/curve-dao-operations github repo produced the script below:
import curve_dao
from curve_dao.addresses import CURVE_DAO_OWNERSHIP
calldata: List[Tuple] = [
  (
      VESTING_ESCROW_FACTORY_ADDRESS, 
      "deploy_vesting_contract", 
      CRV_TOKEN_ADDRESS, 
      "0x21ff52E30b0cDf7eC2cF6619c7F1483D045E6700", 
      VEST_AMOUNT, 
      True, 
      (2 * 365 * 86400),
  )
]
# The tuple in calldata above follows this pattern: (contract, function_name, *args)

vote_script = curve_dao.vote_utils.prepare_vote_script(
CURVE_DAO_OWNERSHIP,
calldata,
)
"""
VEST_DEPLOYMENT_VOTE_SCRIPT = "0000000140907540d8a6c65c637785e8f8b742ae6b0b996800000144b61d27f6000000000000000000000000e3997288987e6297ad550a69b31439504f5132670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a4cff0e79f000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd5200000000000000000000000021ff52e30b0cdf7ec2cf6619c7f1483d045e67000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000003c2670000000000000000000000000000000000000000000000000000000000"

"""
In production, deploy the proxy and record its address first. Next, the 
curvefi/curve-dao-operations repo would produce a different clawback script for you 
like so:

import curve_dao
from curve_dao.addresses import CURVE_DAO_OWNERSHIP

PROXY_ADDRESS = {THE ADDRESS YOUR PROXY DEPLOYED TO}

calldata: List[Tuple] = [
  (
      PROXY_ADDRESS, 
      "set_operator", 
      VESTING_ESCROW_FACTORY_ADMIN, 
  )
]
# The tuple in calldata above follows this pattern: (contract, function_name, *args)

vote_script = curve_dao.vote_utils.prepare_vote_script(
CURVE_DAO_OWNERSHIP,
calldata,
)
"""
CLAWBACK_FUNDS_VOTE_SCRIPT = "0000000140907540d8a6c65c637785e8f8b742ae6b0b9968000000c4b61d27f600000000000000000000000021ff52E30b0cDf7eC2cF6619c7F1483D045E670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000002430c7be7200000000000000000000000040907540d8a6c65c637785e8f8b742ae6b0b996800000000000000000000000000000000000000000000000000000000"